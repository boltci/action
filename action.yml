name: 'BoltCI Action'
description: 'The action used to run the BoltCI test runner.'
inputs:
  index: 
    description: 'Index of the chunk to run'
    required: true
  chunks: 
    description: 'Number of chunks'
    required: true
  max-processes:
    description: 'Maximum number of processes to run in parallel'
    required: false
    default: '8'
  image:
    description: 'BoltCI image to use'
    required: true
    default: 'ghcr.io/boltci/boltci:1.1.9'
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Composer cache
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-${{ inputs.image }}-composer-${{ hashFiles('composer.lock', '*/composer.lock') }}

    - name: MySQL cache
      id: mysql-cache
      uses: actions/cache@v4
      with:
        path: boltci-mysql-data
        key: ${{ runner.os }}-${{ inputs.image }}-mysql-${{ hashFiles('database/migrations/*', 'app/**/Database/Migrations/*') }}

    - name: Cache BoltCI image
      uses: actions/cache@v4
      with:
        path: boltci-image.tar
        key: ${{ runner.os }}-boltci-${{ inputs.image }}
        restore-keys: docker-${{ runner.os }}-boltci-

    - name: Load/Pull BoltCI image
      shell: bash
      run: |
        CACHE_PATH="boltci-image.tar"
        if [ -f "$CACHE_PATH" ]; then
          echo "Loading image from cache..."
          docker load < "$CACHE_PATH"
        else
          echo "Pulling and saving image to cache..."
          docker pull "${{ inputs.image }}"
          docker save "${{ inputs.image }}" > "$CACHE_PATH"
        fi

    - name: Run BoltCI Image
      shell: bash
      run: |
        docker run --rm \
          -v "$GITHUB_WORKSPACE:/github/workspace" \
          -w /github/workspace \
          ${{ inputs.image }} ${{ inputs.chunks }} ${{ inputs.index }} ${{ inputs.max-processes }}