name: 'BoltCI Action'
description: 'The action used to run the BoltCI test runner.'
inputs:
  index: 
    description: 'Index of the chunk to run'
    required: true
  chunks: 
    description: 'Number of chunks'
    required: true
  max-processes:
    description: 'Maximum number of processes to run in parallel'
    required: false
    default: '8'
  image:
    description: 'BoltCI image to use'
    required: true
    default: 'ghcr.io/boltci/boltci:1.1.9'
  variables:
    description: 'A string of environment variables'
    required: false
    default: ''
  before-composer-install:
    description: 'A string of commands to run before composer install'
    required: false
    default: ''
  after-composer-install:
    description: 'A string of commands to run after composer install'
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Create cache directory
      shell: bash
      run: |
          mkdir -p boltci/cache
          echo "Cache directory created at boltci/cache"

    - name: Add variables to boltci/.env
      shell: bash
      run: |
          if [ -n '${{ inputs.variables }}' ]; then
            echo "Adding variables to boltci/.env"
            echo '${{ inputs.variables }}' >> boltci/.env
          fi

    - name: Set up hooks by adding them to boltci/<hook>.sh
      shell: bash
      run: |
          if [ -n '${{ inputs.before-composer-install }}' ]; then
            echo "Adding before-composer-install hook"
            echo '${{ inputs.before-composer-install }}' >> boltci/before-composer-install.sh
          fi
          if [ -n '${{ inputs.after-composer-install }}' ]; then
            echo "Adding after-composer-install hook"
            echo '${{ inputs.after-composer-install }}' >> boltci/after-composer-install.sh
          fi

    - name: Composer cache
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-${{ inputs.image }}-composer-${{ hashFiles('composer.lock') }}

    - name: MySQL cache
      id: mysql-cache
      uses: actions/cache@v4
      with:
        path: boltci/cache/mysql
        key: ${{ runner.os }}-${{ inputs.image }}-mysql-${{ hashFiles('database/migrations/*', 'app/**/Database/Migrations/*') }}
    
    - name: MariaDB cache
      id: mariadb-cache
      uses: actions/cache@v4
      with:
        path: boltci/cache/mariadb
        key: ${{ runner.os }}-${{ inputs.image }}-mariadb-${{ hashFiles('database/migrations/*', 'app/**/Database/Migrations/*') }}

    - name: PostgreSQL cache
      id: pgsql-cache
      uses: actions/cache@v4
      with:
        path: boltci/cache/pgsql
        key: ${{ runner.os }}-${{ inputs.image }}-pgsql-${{ hashFiles('database/migrations/*', 'app/**/Database/Migrations/*') }}

    - name: Cache BoltCI image
      if: ${{ runner.environment == 'github-hosted' }}
      uses: actions/cache@v4
      with:
        path: boltci/cache/image.tar
        key: ${{ runner.os }}-boltci-${{ inputs.image }}
        restore-keys: docker-${{ runner.os }}-boltci-

    - name: Load/Pull BoltCI image
      shell: bash
      run: |
        CACHE_PATH="boltci/cache/image.tar"
        if [ -f "$CACHE_PATH" ]; then
          echo "Loading image from cache..."
          docker load < "$CACHE_PATH"
        else
          echo "Pulling and saving image to cache..."
          docker pull "${{ inputs.image }}"
          docker save "${{ inputs.image }}" > "$CACHE_PATH"
        fi

    - name: Debug
      shell: bash
      run: |
        echo "Running BoltCI with the following parameters:"
        echo "Image: ${{ inputs.image }}"
        echo "Chunks: ${{ inputs.chunks }}"
        echo "Index: ${{ inputs.index }}"
        echo "Max Processes: ${{ inputs.max-processes }}"
        echo "Variables: ${{ inputs.variables }}"
        echo "Before Composer Install: ${{ inputs.before-composer-install }}"
        echo "After Composer Install: ${{ inputs.after-composer-install }}"
        echo "GitHub Workspace: $GITHUB_WORKSPACE"
        ls -la $GITHUB_WORKSPACE

    - name: Run BoltCI Image
      shell: bash
      run: |
        docker run --rm \
          -v "$GITHUB_WORKSPACE:/github/workspace" \
          -w /github/workspace \
          ${{ inputs.image }} ${{ inputs.chunks }} ${{ inputs.index }} ${{ inputs.max-processes }}
